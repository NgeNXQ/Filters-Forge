function Apply(image, blockSize, threadsCount)
    threads[threadsCount]
    threadPayload = image.Height / blockSize / threadsCount

    imageBitmapData = image.Lock()

    for i = 0 to i < threadsCount with i += 1
        threads[i] = Thread()
        indexStart = i * threadPayload
	
	if i == (threadsCount - 1)
	    indexFinish = image.Height
	else
	    indexFinish = indexStart + threadPayload * blockSize

        for y = 0 to y < image.Height with y += blockSize
            for x = 0 to x < image.Width with x += blockSize
                correctBlockWidth = Min(blockSize, image.Width - x)
                correctBlockHeight = Min(blockSize, image.Height - y)
                averageColor = GetAverageColor(x, y, correctBlockWidth, correctBlockHeight)
                FillPixelBlock(x, y, correctBlockWidth, correctBlockHeight, averageColor)

	 threads[i].Start()

    image.Unlock(imageBitmapData)

    return image

function GetAverageColor(startX, startY, blockWidth, blockHeight)
    totalR = 0
    totalG = 0
    totalB = 0
    totalA = 0
    pixelsCount = blockWidth * blockHeight

    for y = startY to y < startY + blockHeight and y < image.Height with y += 1
        for x = startX to x < startX + blockWidth and x < image.Width with x += 1
            pixelColor = image.GetPixelSynchronized(x, y)
            totalR += pixelColor.R
            totalG += pixelColor.G
            totalB += pixelColor.B
            totalA += pixelColor.A

    averageR = totalR / pixelsCount;
    averageG = totalG / pixelsCount;
    averageB = totalB / pixelsCount;
    averageA = totalA / pixelsCount;

    return Color.FromArgb(averageA, averageR, averageG, averageB)

function FillPixelBlock(startX, startY, blockWidth, blockHeight, color)
    for y = startY to y < startY + blockHeight and y < image.Height with y += 1
        for x = startX to x < startX + blockWidth and x < image.Width with x += 1
            image.SetPixelSynchronized(x, y, color)

function Apply(image, blockSize, threadsCount)
    threads[threadsCount]
    threadPayload = image.Height / blockSize / threadsCount

    for i = 0 to i < threadsCount with i += 1
        threads[i] = Thread()
        indexStart = i * threadPayload * blockSize
	
	if i == (threadsCount - 1)
	    indexFinish = image.Height
	else
	    indexFinish = indexStart + threadPayload * blockSize

        for y = 0 to y < image.Height with y += blockSize
            for x = 0 to x < image.Width with x += blockSize
                correctBlockWidth = Min(blockSize, image.Width - x)
                correctBlockHeight = Min(blockSize, image.Height - y)
                averageColor = GetAverageColor(x, y, correctBlockWidth, correctBlockHeight)
                FillPixelBlock(x, y, correctBlockWidth, correctBlockHeight, averageColor)

	 threads[i].Start()

    return image


